version: '3.8'

services:
  # Main Streamlit UI
  mltrainer-ui:
    build:
      context: .
      dockerfile: Dockerfile.unified
    ports:
      - "8501:8501"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
      - DATABASE_URL=postgresql://mltrainer:mltrainer@postgres:5432/mltrainer
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    command: streamlit run mltrainer_unified_chat.py

  # FastAPI Backend
  mltrainer-api:
    build:
      context: .
      dockerfile: Dockerfile.unified
    ports:
      - "8000:8000"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
      - DATABASE_URL=postgresql://mltrainer:mltrainer@postgres:5432/mltrainer
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    command: uvicorn backend.unified_api:app --host 0.0.0.0 --port 8000

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=mltrainer
      - POSTGRES_PASSWORD=mltrainer
      - POSTGRES_DB=mltrainer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mltrainer"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: